---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  pDBPassword:
    Description: Mixed alphanumeric and must be between 8 and 28 characters and contain
      at least one capital letter
    NoEcho: true
    Type: String
    MinLength: 8
    MaxLength: 28
    AllowedPattern: '[a-zA-Z0-9!^*\-_+]*'
    ConstraintDescription: Can only contain alphanumeric characters or the following
      special characters !^*-_+, between 8 and 28 characters
    Default: '2pM2zVhZjU8x'
  pDBName:
    Description: Name of database
    Type: String
    Default: mage2
  pDBUser:
    Description: database master user
    Type: String
    Default: mage2
Resources:
  rRDSInstanceMySQL:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: mage2
      DBName: !Ref pDBName
      Engine: MySQL
      MultiAZ: true
      StorageEncrypted: true
      MasterUsername: !Ref pDBUser
      MasterUserPassword: !Ref pDBPassword
      DBInstanceClass: db.t2.large
      AllocatedStorage: 10
      VPCSecurityGroups:
        - sg-35de0741
      DBSubnetGroupName: pci-vpc-applicationtemplate-s90koqrd99z9-rdbsubnetgroup-15eq9fzo4u3q1
  rELBApp:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - subnet-55590a1e
        - subnet-99990cb6
      HealthCheck:
        HealthyThreshold: 2
        Interval: 15
        Target: TCP:80
        Timeout: 5
        UnhealthyThreshold: 3
      SecurityGroups:
        - sg-c9d108bd
      Listeners:
        - InstancePort: 80
          LoadBalancerPort: 80
          Protocol: HTTP
          InstanceProtocol: HTTP
      Scheme: internal
      Tags:
        - Key: Name
          Value: mage2-app-elb
        - Key: Environment
          Value: PCI
  rELBWeb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - subnet-1a891c35
        - subnet-5b5f0c10
      HealthCheck:
        HealthyThreshold: 2
        Interval: 30
        Target: TCP:80
        Timeout: 5
        UnhealthyThreshold: 5
      SecurityGroups:
        - sg-30c81144
      Listeners:
        - InstancePort: 80
          LoadBalancerPort: 80
          Protocol: HTTP
          InstanceProtocol: HTTP
      Tags:
        - Key: Name
          Value: mage2-proxy-elb
        - Key: Environment
          Value: PCI
  rLaunchConfigurationApp:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              nginx: []
              java-1.6.0-openjdk-devel: []
              amazon-efs-utils: []
              git: []
              php71: []
              php71-fpm: []
              php71-common: []
              php71-pdo: []
              php71-mysqlnd: []
              php71-opcache: []
              php71-xml: []
              php71-mcrypt: []
              php71-gd: []
              php71-devel: []
              php71-intl: []
              php71-mbstring: []
              php71-bcmath: []
              php71-json: []
              php71-soap: []
          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
              php-fpm:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: ami-1853ac65
      InstanceType: c5.large
      KeyName: twpci
      SecurityGroups:
        - sg-4fd50c3b
        - sg-a0a47dd4
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash
          yum update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rLaunchConfigurationApp --region ${AWS::Region}
  rAutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rLaunchConfigurationApp
    Properties:
      AvailabilityZones:
        - us-east-1b
        - us-east-1c
      VPCZoneIdentifier:
        - subnet-55590a1e
        - subnet-99990cb6
      LaunchConfigurationName: !Ref rLaunchConfigurationApp
      MinSize: 2
      MaxSize: 4
      LoadBalancerNames:
        - !Ref rELBApp
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: mage2-app
          PropagateAtLaunch: true
        - Key: Environment
          Value: PCI
          PropagateAtLaunch: true
  rAutoScalingUpApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: 500
      ScalingAdjustment: 1
  rAutoScalingDownApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: 500
      ScalingAdjustment: -1
  rCWAlarmHighCPUApp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 50
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
        - !Ref rAutoScalingUpApp
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAutoScalingGroupApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: AppServerCpuHighUtilization
  rCWAlarmLowCPUApp:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rAutoScalingGroupApp
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 10
      AlarmDescription: Alarm if CPU too low, remove an app server
      Period: 60
      AlarmActions:
        - !Ref rAutoScalingDownApp
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAutoScalingGroupApp
      ComparisonOperator: LessThanThreshold
      MetricName: AppServerCpuLowUtilization
  rLaunchConfigurationWeb:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              nginx: []
              java-1.6.0-openjdk-devel: []
              git: []
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auot-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::Cloudformation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource EC2
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: '000400'
              owner: root
              group: root
            /tmp/nginx/default.conf:
              content: !Sub |
                server {
                  listen 80;
                  charset utf-8;
                  location / {
                    resolver xxxxx;
                    set $elb 'https://${rELBApp.DNSName}';
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_set_header X-Proxy-Proto $http_x_forwarded_proto;
                    proxy_redirect off;
                    proxy_pass $elb;
                  }
                }
              mode: '000755'
              owner: root
              group: root
          commands:
            01-nginx-setup:
              command: |
                #!/bin/bash
                ## Nginx setup
                sleep 5
                echo 'Replace resolver placeholder with /etc/resolv.conf nameservers'
                sed -i "s/xxxxx/$(grep ^nameserver /etc/resolv.conf | sed 's/^nameserver//' | tr -d '\n')/" /tmp/nginx/default.conf
                cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
                service nginx stop
                sed -i '/default_server;/d' /etc/nginx/nginx.conf
                sleep 10
                service nginx restart
          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/nginx/conf.d/default.conf
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-1853ac65
      InstanceType: t2.medium
      KeyName: twpci
      SecurityGroups:
        - sg-70cd1404
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rLaunchConfigurationWeb --region ${AWS::Region}
          yum update -y

          ## Nginx setup
          sleep 5
          cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
          service nginx stop
          sed -i '/default_server;/d' /etc/nginx/nginx.conf
          sleep 10
          service nginx restart
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource rAutoScalingGroupWeb --region ${AWS::Region}
  rAutoScalingGroupWeb:
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT3M
        WaitOnResourceSignals: true
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rLaunchConfigurationWeb
    Properties:
      AvailabilityZones:
        - us-east-1b
        - us-east-1c
      VPCZoneIdentifier:
        - subnet-5b5f0c10
        - subnet-1a891c35
      LaunchConfigurationName: !Ref rLaunchConfigurationWeb
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: 2
      LoadBalancerNames:
        - !Ref rELBWeb
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: mage2-web
          PropagateAtLaunch: true
        - Key: Environment
          Value: PCI
          PropagateAtLaunch: true
  rAutoScalingUpWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupWeb
      Cooldown: 500
      ScalingAdjustment: 1
  rAutoScalingDownWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupWeb
      Cooldown: 500
      ScalingAdjustment: -1
  rCWAlarmHighCPUWeb:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 50
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
        - !Ref rAutoScalingUpWeb
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAutoScalingGroupWeb
      ComparisonOperator: GreaterThanThreshold
      MetricName: AppServerCpuHighUtilization
  rCWAlarmLowCPUWeb:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rAutoScalingGroupWeb
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 10
      AlarmDescription: Alarm if CPU too low, remove an app server
      Period: 60
      AlarmActions:
        - !Ref rAutoScalingDownWeb
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAutoScalingGroupWeb
      ComparisonOperator: LessThanThreshold
      MetricName: WebServerCpuLowUtilization
  rElaticacheRedisReplicationGroup:
    Type: "AWS::ElastiCache::ReplicationGroup"
    Properties:
      ReplicationGroupDescription: "Magento 2 Redis for session and cache"
      AutoMinorVersionUpgrade: "true"
      AutomaticFailoverEnabled: "false"
      Engine: "redis"
      EngineVersion: 3.2.10
      NumCacheClusters: 2
      CacheSubnetGroupName: pci-subnet
      CacheNodeType: "cache.t2.medium"
      SecurityGroupIds:
        - sg-f3a1c487
        - sg-a0a47dd4
